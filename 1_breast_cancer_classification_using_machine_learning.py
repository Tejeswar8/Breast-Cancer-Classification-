# -*- coding: utf-8 -*-
"""1. Breast Cancer Classification using Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12nJB_b_WymeoMGymF8ozV16TfRkpXw-V

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

"""Data Collection & Processing"""

# loading the data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# loading the data to a data frame
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

# print the first 5 rows of the dataframe
data_frame.head()

# adding the 'target' column to the data frame
data_frame['label'] = breast_cancer_dataset.target

# print last 5 rows of the dataframe
data_frame.tail()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(20,20))
sns.heatmap(data_frame.corr(),annot=True,fmt='.1f')
plt.show()

# number of rows and columns in the dataset
data_frame.shape

# getting some information about the data
data_frame.info()

# checking for missing values
data_frame.isnull().sum()

# statistical measures about the data
data_frame.describe()

# checking the distribution of Target Varibale
data_frame['label'].value_counts()

"""1 --> Benign

0 --> Malignant
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
(unique,counts)= np.unique(data_frame['label'],return_counts=True)
print(unique,counts)
sns.barplot(x=['Malignant','Benign '], y=counts,palette=['r', 'b'])
plt.xlabel("class")
plt.ylabel("No.of samples")
plt.xticks()
plt.title('Class Distribution ')
plt.show()

X=data_frame.iloc[:,1:-1]
y=data_frame.iloc[:,-1]

import pandas as pd
import imblearn
from imblearn.over_sampling import SMOTE
smote = SMOTE()
# Use fit_resample to get the oversampled data
X, y = smote.fit_resample(X, y)

print(X.shape)
print(y.shape)
print(y.value_counts())

import matplotlib.pyplot as plt
import numpy as np
# Assuming cm is the confusion matrix
# creating the dataset
data = {'Malignant':4000, 'Benign':4000}
classes = list(data.keys())
values = list(data.values())

fig = plt.figure(figsize = (7, 5))

# creating the bar plot

sns.barplot(x=classes, y=values, palette=['r', 'b'])

# Set the y-axis label
plt.ylabel('Count')
plt.xlabel('Class')
# Set the title
plt.title('After SOMTE')

# Show the plot
plt.show()

data_frame.groupby('label').mean()

"""Separating the features and target"""

X = data_frame.drop(columns='label', axis=1)
Y = data_frame['label']

print(X)

print(Y)

"""Splitting the data into training data & Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model using Training data

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

# precision on training data
X_train_prediction = model.predict(X_train)
training_data_precision = precision_score(Y_train, X_train_prediction)

print('Precision on training data = ', training_data_precision)

# precision on test data
X_test_prediction = model.predict(X_test)
test_data_precision = precision_score(Y_test, X_test_prediction)

print('Precision on testing data = ', test_data_precision)

# recall on training data
X_train_prediction = model.predict(X_train)
training_data_recall = recall_score(Y_train, X_train_prediction)

print('recall on training data = ', training_data_recall)

# recall on test data
X_test_prediction = model.predict(X_test)
test_data_recall = recall_score(Y_test, X_test_prediction)

print('recall on testing data = ', test_data_recall)

# Confusion matrix on training data
X_train_prediction = model.predict(X_train)
training_data_confusion = confusion_matrix(Y_train, X_train_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Training Data')
sns.heatmap(training_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

print('Confusion Matrix on training data = ', training_data_confusion)

# Confusion matrix on test data
X_test_prediction = model.predict(X_test)
test_data_confusion = confusion_matrix(Y_test, X_test_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Testing Data')
sns.heatmap(test_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

print('Confusion Matrix on testing data = ', test_data_confusion)

"""Building a Predictive System"""

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast cancer is Malignant')

else:
  print('The Breast Cancer is Benign')

"""Decision Tree"""

tree = DecisionTreeClassifier()

# training the Decision Tree model using Training data
tree.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction = tree.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

# accuracy on test data
X_test_prediction = tree.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

# precision on training data
X_train_prediction = tree.predict(X_train)
training_data_precision = precision_score(Y_train, X_train_prediction)

print('Precision on training data = ', training_data_precision)

# precision on test data
X_test_prediction = tree.predict(X_test)
test_data_precision  = precision_score(Y_test, X_test_prediction)

print('Precision on testing data = ', test_data_precision)

# recall on training data
X_train_prediction = tree.predict(X_train)
training_data_recall = recall_score(Y_train, X_train_prediction)

print('Recall on training data = ', training_data_recall)

# recall on test data
X_test_prediction = tree.predict(X_test)
test_data_recall  = recall_score(Y_test, X_test_prediction)

print('Recall on testing data = ', test_data_recall)

# Confusion matrix on training data
X_train_prediction = tree.predict(X_train)
training_data_confusion = confusion_matrix(Y_train, X_train_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Training Data')
sns.heatmap(training_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

# Confusion matrix on test data
X_test_prediction = tree.predict(X_test)
test_data_confusion = confusion_matrix(Y_test, X_test_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Testing Data')
sns.heatmap(test_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

print('Confusion Matrix on training data = ', training_data_confusion)
print('Confusion Matrix on testing data = ', test_data_confusion)

"""Building a Predictive System

"""

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = tree.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast cancer is Malignant')

else:
  print('The Breast Cancer is Benign')

"""RANDOM FOREST"""

forest = RandomForestClassifier()

# training the Random Forest model using Training data
forest.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction = forest.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

# accuracy on test data
X_test_prediction = forest.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

# precision on training data
X_train_prediction = forest.predict(X_train)
training_data_precision = precision_score(Y_train, X_train_prediction)

print('Precision on Training data = ', training_data_precision)

# precision on test data
X_test_prediction = forest.predict(X_test)
test_data_precision  = precision_score(Y_test, X_test_prediction)

print('Precision on Testing data = ', test_data_precision)

# recall on training data
X_train_prediction = forest.predict(X_train)
training_data_recall = recall_score(Y_train, X_train_prediction)

print('Recall on Training data = ', training_data_recall)

# recall on test data
X_test_prediction = forest.predict(X_test)
test_data_recall  = recall_score(Y_test, X_test_prediction)

print('Recall on Testing data = ', test_data_recall)

"""Building a Predictive System"""

# accuracy on training data
X_train_prediction = forest.predict(X_train)
training_data_confusion = confusion_matrix(Y_train, X_train_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Training Data')
sns.heatmap(training_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

# recall on test data
X_test_prediction = forest.predict(X_test)
test_data_confusion  = confusion_matrix(Y_test, X_test_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Testing Data')
sns.heatmap(test_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

print('Confusion Matrix on training data = ', training_data_confusion)
print('Confusion Matrix on testing data = ', test_data_confusion)

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = forest.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast cancer is Malignant')

else:
  print('The Breast Cancer is Benign')

"""KNeighbors Classifier"""

neigh = KNeighborsClassifier()

# training the Random Forest model using Training data
neigh.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction = neigh.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

# accuracy on test data
X_test_prediction = neigh.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

# precision on training data
X_train_prediction = neigh.predict(X_train)
training_data_precision = precision_score(Y_train, X_train_prediction)

print('Precision on Train data = ', training_data_precision)

# precision on test data
X_test_prediction = neigh.predict(X_test)
test_data_precision  = precision_score(Y_test, X_test_prediction)

print('Precision on Test data = ', test_data_precision)

# recall on training data
X_train_prediction = neigh.predict(X_train)
training_data_recall = recall_score(Y_train, X_train_prediction)

print('Recall on train data = ', training_data_recall)

# recall on test data
X_test_prediction = neigh.predict(X_test)
test_data_recall  = recall_score(Y_test, X_test_prediction)

print('Recall on Test data = ', test_data_recall)

# confusion matrix on training data
X_train_prediction = neigh.predict(X_train)
training_data_confusion = confusion_matrix(Y_train, X_train_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Training Data')
sns.heatmap(training_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

"""Building a Predictive System"""

# Confusion matrix on test data
X_test_prediction = neigh.predict(X_test)
test_data_confusion = confusion_matrix(Y_test, X_test_prediction)
plt.figure(figsize=(6, 4))
plt.title('Confusion Matrix on Testing Data')
sns.heatmap(test_data_confusion, annot=True, fmt='d', cmap='Blues')
plt.show()

print('Confusion Matrix on training data = ', training_data_confusion)
print('Confusion Matrix on testing data = ', test_data_confusion)

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = neigh.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast cancer is Malignant')

else:
  print('The Breast Cancer is Benign')

import pandas as pd
#Test Result model data
models = {
    'Logistic Regression': {'Accuracy': 0.9298, 'Precision': 0.9420, 'Recall': 0.942},
    'Decision Tree': {'Accuracy': 0.9210, 'Precision': 0.9687, 'Recall': 0.8985},
    'Random Forest': {'Accuracy': 0.9385, 'Precision': 0.9558, 'Recall': 0.9420},
    'K-Nearest Neighbors': {'Accuracy': 0.9123, 'Precision': 0.9275, 'Recall': 0.9275}
}
# Created the DataFrame Model
data_model = pd.DataFrame(index=models.keys(), columns=['Accuracy', 'Precision', 'Recall'])
data_model['Accuracy'] = [model['Accuracy'] for model in models.values()]
data_model['Precision'] = [model['Precision'] for model in models.values()]
data_model['Recall'] = [model['Recall'] for model in models.values()]

data_model.round(4)

ax = data_model.plot.bar(rot=45)
ax.legend(ncol=len(models.keys()), bbox_to_anchor=(0, 1), loc='lower left', prop={'size': 14})
plt.tight_layout()
plt.show()

